// Mocks generated by Mockito 5.4.4 from annotations
// in kanban_app/test/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i11;

import 'package:dio/dio.dart' as _i2;
import 'package:flutter/foundation.dart' as _i12;
import 'package:flutter/material.dart' as _i6;
import 'package:hive_flutter/hive_flutter.dart' as _i32;
import 'package:kanban_app/database/hive_model.dart' as _i19;
import 'package:kanban_app/database/hive_service.dart' as _i18;
import 'package:kanban_app/features/dashboard/modules/home/home_view_model.dart'
    as _i25;
import 'package:kanban_app/features/dashboard/modules/settings/settings_view_model.dart'
    as _i29;
import 'package:kanban_app/features/dashboard/modules/task_board/enums/task_status.dart'
    as _i22;
import 'package:kanban_app/features/dashboard/modules/task_board/repository/models/task.dart'
    as _i8;
import 'package:kanban_app/features/dashboard/modules/task_board/repository/models/task_comment.dart'
    as _i9;
import 'package:kanban_app/features/dashboard/modules/task_board/repository/models/task_detail.dart'
    as _i5;
import 'package:kanban_app/features/dashboard/modules/task_board/repository/task_board_repo.dart'
    as _i30;
import 'package:kanban_app/features/dashboard/modules/task_board/task_board_service.dart'
    as _i21;
import 'package:kanban_app/features/dashboard/modules/task_board/task_board_view_model.dart'
    as _i27;
import 'package:kanban_app/features/dashboard/modules/time_tracker/time_tracker_view_model.dart'
    as _i28;
import 'package:kanban_app/features/projects/projects_service.dart' as _i20;
import 'package:kanban_app/features/projects/repository/models/project.dart'
    as _i10;
import 'package:kanban_app/features/projects/repository/projects_repo.dart'
    as _i31;
import 'package:kanban_app/network/api_client_kanban.dart' as _i13;
import 'package:kanban_app/services/preference_service.dart' as _i15;
import 'package:kanban_app/shared/overlays/bottom_sheets/app_bottom_sheet_service.dart'
    as _i23;
import 'package:kanban_app/shared/overlays/snackbars/app_snackbar_service.dart'
    as _i24;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:shared_preferences/shared_preferences.dart' as _i4;
import 'package:stacked/stacked.dart' as _i26;
import 'package:stacked_services/stacked_services.dart' as _i16;
import 'package:stacked_themes/src/theme_manager.dart' as _i17;
import 'package:stacked_themes/stacked_themes.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_2 extends _i1.SmartFake
    implements _i4.SharedPreferences {
  _FakeSharedPreferences_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskDetail_3 extends _i1.SmartFake implements _i5.TaskDetail {
  _FakeTaskDetail_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextEditingController_4 extends _i1.SmartFake
    implements _i6.TextEditingController {
  _FakeTextEditingController_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusNode_5 extends _i1.SmartFake implements _i6.FocusNode {
  _FakeFocusNode_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeThemeService_6 extends _i1.SmartFake implements _i7.ThemeService {
  _FakeThemeService_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTask_7 extends _i1.SmartFake implements _i8.Task {
  _FakeTask_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskComment_8 extends _i1.SmartFake implements _i9.TaskComment {
  _FakeTaskComment_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProject_9 extends _i1.SmartFake implements _i10.Project {
  _FakeProject_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_10 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_11 extends _i1.SmartFake
    implements _i2.HttpClientAdapter {
  _FakeHttpClientAdapter_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_12 extends _i1.SmartFake implements _i2.Transformer {
  _FakeTransformer_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_13 extends _i1.SmartFake implements _i2.Interceptors {
  _FakeInterceptors_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_14<T1> extends _i1.SmartFake implements _i2.Response<T1> {
  _FakeResponse_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextSelection_15 extends _i1.SmartFake implements _i6.TextSelection {
  _FakeTextSelection_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextEditingValue_16 extends _i1.SmartFake
    implements _i6.TextEditingValue {
  _FakeTextEditingValue_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextSpan_17 extends _i1.SmartFake implements _i6.TextSpan {
  _FakeTextSpan_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeSize_18 extends _i1.SmartFake implements _i11.Size {
  _FakeSize_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOffset_19 extends _i1.SmartFake implements _i11.Offset {
  _FakeOffset_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRect_20 extends _i1.SmartFake implements _i11.Rect {
  _FakeRect_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusAttachment_21 extends _i1.SmartFake
    implements _i6.FocusAttachment {
  _FakeFocusAttachment_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiagnosticsNode_22 extends _i1.SmartFake
    implements _i6.DiagnosticsNode {
  _FakeDiagnosticsNode_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i12.TextTreeConfiguration? parentConfiguration,
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [ApiClientKanban].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClientKanban extends _i1.Mock implements _i13.ApiClientKanban {
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  int get defaultConnectTimeout => (super.noSuchMethod(
        Invocation.getter(#defaultConnectTimeout),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get defaultReceiveTimeout => (super.noSuchMethod(
        Invocation.getter(#defaultReceiveTimeout),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.Dio get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeDio_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Dio);

  @override
  _i3.Future<T> get<T>(
    String? endpoint, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [endpoint],
          {
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #get,
                  [endpoint],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #get,
                [endpoint],
                {
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #get,
                  [endpoint],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #get,
                [endpoint],
                {
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> post<T>(
    String? endpoint, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [endpoint],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #post,
                  [endpoint],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #post,
                [endpoint],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #post,
                  [endpoint],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #post,
                [endpoint],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> put<T>(
    String? endpoint, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [endpoint],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #put,
                  [endpoint],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #put,
                [endpoint],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #put,
                  [endpoint],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #put,
                [endpoint],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> patch<T>(
    String? endpoint, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [endpoint],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #patch,
                  [endpoint],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #patch,
                [endpoint],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #patch,
                  [endpoint],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #patch,
                [endpoint],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> delete<T>(
    String? endpoint, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [endpoint],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #delete,
                  [endpoint],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #delete,
                [endpoint],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #delete,
                  [endpoint],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #delete,
                [endpoint],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #cancelToken: cancelToken,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  void initialise() => super.noSuchMethod(
        Invocation.method(
          #initialise,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PreferenceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceService extends _i1.Mock implements _i15.PreferenceService {
  @override
  _i4.SharedPreferences get instance => (super.noSuchMethod(
        Invocation.getter(#instance),
        returnValue: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#instance),
        ),
        returnValueForMissingStub: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#instance),
        ),
      ) as _i4.SharedPreferences);

  @override
  set instance(_i4.SharedPreferences? _instance) => super.noSuchMethod(
        Invocation.setter(
          #instance,
          _instance,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<bool> setActiveProjectId(String? id) => (super.noSuchMethod(
        Invocation.method(
          #setActiveProjectId,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i16.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  _i6.GlobalKey<_i6.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i6.GlobalKey<_i6.NavigatorState>?);

  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i16.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<T?>? navigateWithTransition<T>(
    _i6.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i6.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i16.Transition? transitionClass,
    _i16.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  _i3.Future<T?>? replaceWithTransition<T>(
    _i6.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i6.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i16.Transition? transitionClass,
    _i16.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void popUntil(
    _i6.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i6.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  _i3.Future<T?>? navigateToView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i6.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i16.Transition? transition,
    _i16.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  _i3.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i6.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  _i3.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  _i3.Future<T?>? clearStackAndShowView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  _i3.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  _i3.Future<T?>? clearTillFirstAndShowView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);

  @override
  _i3.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i6.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.Future<T?>?);
}

/// A class which mocks [ThemeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeService extends _i1.Mock implements _i7.ThemeService {
  @override
  int get themeCount => (super.noSuchMethod(
        Invocation.getter(#themeCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.ThemeManagerMode get selectedThemeMode => (super.noSuchMethod(
        Invocation.getter(#selectedThemeMode),
        returnValue: _i7.ThemeManagerMode.light,
        returnValueForMissingStub: _i7.ThemeManagerMode.light,
      ) as _i7.ThemeManagerMode);

  @override
  void setThemeManager(_i17.ThemeManager? manager) => super.noSuchMethod(
        Invocation.method(
          #setThemeManager,
          [manager],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<dynamic> selectThemeAtIndex(int? themeIndex) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectThemeAtIndex,
          [themeIndex],
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  void toggleDarkLightTheme() => super.noSuchMethod(
        Invocation.method(
          #toggleDarkLightTheme,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setThemeMode(_i7.ThemeManagerMode? themeManagerMode) =>
      super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [themeManagerMode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setThemes({
    _i6.ThemeData? lightTheme,
    _i6.ThemeData? darkTheme,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setThemes,
          [],
          {
            #lightTheme: lightTheme,
            #darkTheme: darkTheme,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveService extends _i1.Mock implements _i18.HiveService {
  @override
  _i3.Future<void> initialise() => (super.noSuchMethod(
        Invocation.method(
          #initialise,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<T> save<T extends _i19.HiveModel<dynamic>>(T? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #save,
                  [value],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #save,
                [value],
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #save,
                  [value],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #save,
                [value],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<List<T>> saveAll<T extends _i19.HiveModel<dynamic>>(
          List<T>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAll,
          [values],
        ),
        returnValue: _i3.Future<List<T>>.value(<T>[]),
        returnValueForMissingStub: _i3.Future<List<T>>.value(<T>[]),
      ) as _i3.Future<List<T>>);

  @override
  _i3.Future<T?> get<T extends _i19.HiveModel<dynamic>>(
    dynamic key,
    T Function(Map<String, dynamic>)? fromJson,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            key,
            fromJson,
          ],
        ),
        returnValue: _i3.Future<T?>.value(),
        returnValueForMissingStub: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);

  @override
  _i3.Future<List<T>> getAll<T extends _i19.HiveModel<dynamic>>(
          T Function(Map<String, dynamic>)? fromJson) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [fromJson],
        ),
        returnValue: _i3.Future<List<T>>.value(<T>[]),
        returnValueForMissingStub: _i3.Future<List<T>>.value(<T>[]),
      ) as _i3.Future<List<T>>);

  @override
  _i3.Future<bool> delete<T extends _i19.HiveModel<dynamic>>(dynamic key) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> deleteAll<T extends _i19.HiveModel<dynamic>>() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ProjectsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsService extends _i1.Mock implements _i20.ProjectsService {
  @override
  bool get failedFetchingProjects => (super.noSuchMethod(
        Invocation.getter(#failedFetchingProjects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set failedFetchingProjects(bool? _failedFetchingProjects) =>
      super.noSuchMethod(
        Invocation.setter(
          #failedFetchingProjects,
          _failedFetchingProjects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i10.Project> get projects => (super.noSuchMethod(
        Invocation.getter(#projects),
        returnValue: <_i10.Project>[],
        returnValueForMissingStub: <_i10.Project>[],
      ) as List<_i10.Project>);

  @override
  bool get isBusyFetchingProjects => (super.noSuchMethod(
        Invocation.getter(#isBusyFetchingProjects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyCreatingProjects => (super.noSuchMethod(
        Invocation.getter(#isBusyCreatingProjects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyUpdatingProjects => (super.noSuchMethod(
        Invocation.getter(#isBusyUpdatingProjects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyDeletingProjects => (super.noSuchMethod(
        Invocation.getter(#isBusyDeletingProjects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  dynamic selectProject(_i10.Project? project) => super.noSuchMethod(
        Invocation.method(
          #selectProject,
          [project],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyFetchingProjects(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyFetchingProjects,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyCreatingProjects(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyCreatingProjects,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic createProject(String? name) => super.noSuchMethod(
        Invocation.method(
          #createProject,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyUpdatingProjects(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyUpdatingProjects,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateProject(
    String? id,
    String? name,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [
            id,
            name,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyDeletingProjects(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyDeletingProjects,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic deleteProject(String? id) => super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TaskBoardService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBoardService extends _i1.Mock implements _i21.TaskBoardService {
  @override
  bool get failedFetchingTasks => (super.noSuchMethod(
        Invocation.getter(#failedFetchingTasks),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set failedFetchingTasks(bool? _failedFetchingTasks) => super.noSuchMethod(
        Invocation.setter(
          #failedFetchingTasks,
          _failedFetchingTasks,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i8.Task> get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: <_i8.Task>[],
        returnValueForMissingStub: <_i8.Task>[],
      ) as List<_i8.Task>);

  @override
  List<_i5.TaskDetail> get taskDetails => (super.noSuchMethod(
        Invocation.getter(#taskDetails),
        returnValue: <_i5.TaskDetail>[],
        returnValueForMissingStub: <_i5.TaskDetail>[],
      ) as List<_i5.TaskDetail>);

  @override
  bool get isBusyFetchingTasks => (super.noSuchMethod(
        Invocation.getter(#isBusyFetchingTasks),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyCreatingTasks => (super.noSuchMethod(
        Invocation.getter(#isBusyCreatingTasks),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyUpdatingTask => (super.noSuchMethod(
        Invocation.getter(#isBusyUpdatingTask),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyDeletingTasks => (super.noSuchMethod(
        Invocation.getter(#isBusyDeletingTasks),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyUpdatingTaskStatus => (super.noSuchMethod(
        Invocation.getter(#isBusyUpdatingTaskStatus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyUpdatingTaskDuration => (super.noSuchMethod(
        Invocation.getter(#isBusyUpdatingTaskDuration),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i5.TaskDetail getDetailFromTask(_i8.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #getDetailFromTask,
          [task],
        ),
        returnValue: _FakeTaskDetail_3(
          this,
          Invocation.method(
            #getDetailFromTask,
            [task],
          ),
        ),
        returnValueForMissingStub: _FakeTaskDetail_3(
          this,
          Invocation.method(
            #getDetailFromTask,
            [task],
          ),
        ),
      ) as _i5.TaskDetail);

  @override
  dynamic setBusyFetchingTasks(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyFetchingTasks,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyCreatingTasks(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyCreatingTasks,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic createTask({
    required String? content,
    String? description = r'',
    required _i22.TaskStatus? status,
    DateTime? dueDate,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {
            #content: content,
            #description: description,
            #status: status,
            #dueDate: dueDate,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyUpdatingTask(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyUpdatingTask,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateTask({
    required String? id,
    required String? content,
    String? description = r'',
    required _i22.TaskStatus? status,
    required int? duration,
    DateTime? dueDate,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {
            #id: id,
            #content: content,
            #description: description,
            #status: status,
            #duration: duration,
            #dueDate: dueDate,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyDeletingTasks(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyDeletingTasks,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic deleteTask(String? id) => super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyUpdatingTaskStatus(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyUpdatingTaskStatus,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateTaskStatus({
    required _i8.Task? task,
    required _i22.TaskStatus? status,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTaskStatus,
          [],
          {
            #task: task,
            #status: status,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setBusyUpdatingTaskDuration(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusyUpdatingTaskDuration,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateTaskDuration({
    required _i8.Task? task,
    required int? duration,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTaskDuration,
          [],
          {
            #task: task,
            #duration: duration,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppBottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppBottomSheetService extends _i1.Mock
    implements _i23.AppBottomSheetService {
  @override
  dynamic showModifyProjectBottomSheet({
    String? id,
    required String? name,
    required _i3.Future<bool> Function(String)? onConfirm,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showModifyProjectBottomSheet,
          [],
          {
            #id: id,
            #name: name,
            #onConfirm: onConfirm,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic showDeleteConfirmationBottomSheet({
    required String? title,
    required _i3.Future<bool> Function()? onDelete,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showDeleteConfirmationBottomSheet,
          [],
          {
            #title: title,
            #onDelete: onDelete,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic showModifyTaskBottomSheet(
    _i6.BuildContext? context, {
    _i8.Task? task,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showModifyTaskBottomSheet,
          [context],
          {#task: task},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic showTaskCommentsBottomSheet(
    _i6.BuildContext? context, {
    required String? taskId,
    required String? projectId,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showTaskCommentsBottomSheet,
          [context],
          {
            #taskId: taskId,
            #projectId: projectId,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i22.TaskStatus?> showSelectTaskStatusBottomSheet(
    _i6.BuildContext? context, {
    _i8.Task? task,
    required _i22.TaskStatus? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showSelectTaskStatusBottomSheet,
          [context],
          {
            #task: task,
            #status: status,
          },
        ),
        returnValue: _i3.Future<_i22.TaskStatus?>.value(),
        returnValueForMissingStub: _i3.Future<_i22.TaskStatus?>.value(),
      ) as _i3.Future<_i22.TaskStatus?>);

  @override
  _i3.Future<_i8.Task?> showSelectTaskBottomSheet(_i6.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #showSelectTaskBottomSheet,
          [context],
        ),
        returnValue: _i3.Future<_i8.Task?>.value(),
        returnValueForMissingStub: _i3.Future<_i8.Task?>.value(),
      ) as _i3.Future<_i8.Task?>);
}

/// A class which mocks [AppSnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppSnackbarService extends _i1.Mock
    implements _i24.AppSnackbarService {
  @override
  dynamic showErrorSnackbar({
    String? title,
    required String? message,
    _i11.VoidCallback? onTap,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showErrorSnackbar,
          [],
          {
            #title: title,
            #message: message,
            #onTap: onTap,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic showSuccessSnackbar({
    String? title,
    required String? message,
    _i11.VoidCallback? onTap,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showSuccessSnackbar,
          [],
          {
            #title: title,
            #message: message,
            #onTap: onTap,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HomeViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewModel extends _i1.Mock implements _i25.HomeViewModel {
  @override
  List<_i8.Task> get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: <_i8.Task>[],
        returnValueForMissingStub: <_i8.Task>[],
      ) as List<_i8.Task>);

  @override
  List<_i10.Project> get projects => (super.noSuchMethod(
        Invocation.getter(#projects),
        returnValue: <_i10.Project>[],
        returnValueForMissingStub: <_i10.Project>[],
      ) as List<_i10.Project>);

  @override
  bool get isBusyFetchingProjects => (super.noSuchMethod(
        Invocation.getter(#isBusyFetchingProjects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusyFetchingTasks => (super.noSuchMethod(
        Invocation.getter(#isBusyFetchingTasks),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isActiveLocadingState => (super.noSuchMethod(
        Invocation.getter(#isActiveLocadingState),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i26.ListenableServiceMixin> get listenableServices =>
      (super.noSuchMethod(
        Invocation.getter(#listenableServices),
        returnValue: <_i26.ListenableServiceMixin>[],
        returnValueForMissingStub: <_i26.ListenableServiceMixin>[],
      ) as List<_i26.ListenableServiceMixin>);

  @override
  List<_i26.ReactiveServiceMixin> get reactiveServices => (super.noSuchMethod(
        Invocation.getter(#reactiveServices),
        returnValue: <_i26.ReactiveServiceMixin>[],
        returnValueForMissingStub: <_i26.ReactiveServiceMixin>[],
      ) as List<_i26.ReactiveServiceMixin>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get disposed => (super.noSuchMethod(
        Invocation.getter(#disposed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set disposed(bool? _disposed) => super.noSuchMethod(
        Invocation.setter(
          #disposed,
          _disposed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initialised => (super.noSuchMethod(
        Invocation.getter(#initialised),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get onModelReadyCalled => (super.noSuchMethod(
        Invocation.getter(#onModelReadyCalled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get anyObjectsBusy => (super.noSuchMethod(
        Invocation.getter(#anyObjectsBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set context(_i6.BuildContext? _context) => super.noSuchMethod(
        Invocation.setter(
          #context,
          _context,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.TaskDetail getDetailFromTask(_i8.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #getDetailFromTask,
          [task],
        ),
        returnValue: _FakeTaskDetail_3(
          this,
          Invocation.method(
            #getDetailFromTask,
            [task],
          ),
        ),
        returnValueForMissingStub: _FakeTaskDetail_3(
          this,
          Invocation.method(
            #getDetailFromTask,
            [task],
          ),
        ),
      ) as _i5.TaskDetail);

  @override
  List<_i8.Task> getTasksByStatus(_i22.TaskStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByStatus,
          [status],
        ),
        returnValue: <_i8.Task>[],
        returnValueForMissingStub: <_i8.Task>[],
      ) as List<_i8.Task>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rebuildUi() => super.noSuchMethod(
        Invocation.method(
          #rebuildUi,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setInitialised(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setInitialised,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnModelReadyCalled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setOnModelReadyCalled,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool busy(Object? object) => (super.noSuchMethod(
        Invocation.method(
          #busy,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setBusyForObject(
    Object? object,
    bool? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setBusyForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBusy(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusy,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T skeletonData<T>({
    required T? realData,
    required T? busyData,
    Object? busyKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #skeletonData,
          [],
          {
            #realData: realData,
            #busyData: busyData,
            #busyKey: busyKey,
          },
        ),
        returnValue: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
        returnValueForMissingStub: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
      ) as T);

  @override
  _i3.Future<T> runBusyFuture<T>(
    _i3.Future<T>? busyFuture, {
    Object? busyObject,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runBusyFuture,
          [busyFuture],
          {
            #busyObject: busyObject,
            #throwException: throwException,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  dynamic error(Object? object) => super.noSuchMethod(
        Invocation.method(
          #error,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearErrors() => super.noSuchMethod(
        Invocation.method(
          #clearErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasErrorForKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #hasErrorForKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForModelOrObject(
    dynamic value, {
    Object? key,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForModelOrObject,
          [value],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForObject(
    Object? object,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<T> runErrorFuture<T>(
    _i3.Future<T>? future, {
    Object? key,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runErrorFuture,
          [future],
          {
            #key: key,
            #throwException: throwException,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  void onFutureError(
    dynamic error,
    Object? key,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onFutureError,
          [
            error,
            key,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setViewModelContext(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #setViewModelContext,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.TextEditingController getTextEditingController({String? text}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTextEditingController,
          [],
          {#text: text},
        ),
        returnValue: _FakeTextEditingController_4(
          this,
          Invocation.method(
            #getTextEditingController,
            [],
            {#text: text},
          ),
        ),
        returnValueForMissingStub: _FakeTextEditingController_4(
          this,
          Invocation.method(
            #getTextEditingController,
            [],
            {#text: text},
          ),
        ),
      ) as _i6.TextEditingController);

  @override
  _i6.FocusNode getFocusNode({
    String? debugLabel,
    _i6.KeyEventResult Function(
      _i6.FocusNode,
      _i6.RawKeyEvent,
    )? onKey,
    _i6.KeyEventResult Function(
      _i6.FocusNode,
      _i6.KeyEvent,
    )? onKeyEvent,
    bool? skipTraversal = false,
    bool? canRequestFocus = true,
    bool? descendantsAreFocusable = true,
    bool? descendantsAreTraversable = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFocusNode,
          [],
          {
            #debugLabel: debugLabel,
            #onKey: onKey,
            #onKeyEvent: onKeyEvent,
            #skipTraversal: skipTraversal,
            #canRequestFocus: canRequestFocus,
            #descendantsAreFocusable: descendantsAreFocusable,
            #descendantsAreTraversable: descendantsAreTraversable,
          },
        ),
        returnValue: _FakeFocusNode_5(
          this,
          Invocation.method(
            #getFocusNode,
            [],
            {
              #debugLabel: debugLabel,
              #onKey: onKey,
              #onKeyEvent: onKeyEvent,
              #skipTraversal: skipTraversal,
              #canRequestFocus: canRequestFocus,
              #descendantsAreFocusable: descendantsAreFocusable,
              #descendantsAreTraversable: descendantsAreTraversable,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFocusNode_5(
          this,
          Invocation.method(
            #getFocusNode,
            [],
            {
              #debugLabel: debugLabel,
              #onKey: onKey,
              #onKeyEvent: onKeyEvent,
              #skipTraversal: skipTraversal,
              #canRequestFocus: canRequestFocus,
              #descendantsAreFocusable: descendantsAreFocusable,
              #descendantsAreTraversable: descendantsAreTraversable,
            },
          ),
        ),
      ) as _i6.FocusNode);
}

/// A class which mocks [TaskBoardViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBoardViewModel extends _i1.Mock
    implements _i27.TaskBoardViewModel {
  @override
  List<_i8.Task> get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: <_i8.Task>[],
        returnValueForMissingStub: <_i8.Task>[],
      ) as List<_i8.Task>);

  @override
  bool get isBusyFetchingTasks => (super.noSuchMethod(
        Invocation.getter(#isBusyFetchingTasks),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i26.ListenableServiceMixin> get listenableServices =>
      (super.noSuchMethod(
        Invocation.getter(#listenableServices),
        returnValue: <_i26.ListenableServiceMixin>[],
        returnValueForMissingStub: <_i26.ListenableServiceMixin>[],
      ) as List<_i26.ListenableServiceMixin>);

  @override
  List<_i26.ReactiveServiceMixin> get reactiveServices => (super.noSuchMethod(
        Invocation.getter(#reactiveServices),
        returnValue: <_i26.ReactiveServiceMixin>[],
        returnValueForMissingStub: <_i26.ReactiveServiceMixin>[],
      ) as List<_i26.ReactiveServiceMixin>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get disposed => (super.noSuchMethod(
        Invocation.getter(#disposed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set disposed(bool? _disposed) => super.noSuchMethod(
        Invocation.setter(
          #disposed,
          _disposed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initialised => (super.noSuchMethod(
        Invocation.getter(#initialised),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get onModelReadyCalled => (super.noSuchMethod(
        Invocation.getter(#onModelReadyCalled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get anyObjectsBusy => (super.noSuchMethod(
        Invocation.getter(#anyObjectsBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set context(_i6.BuildContext? _context) => super.noSuchMethod(
        Invocation.setter(
          #context,
          _context,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.TaskDetail getDetailFromTask(_i8.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #getDetailFromTask,
          [task],
        ),
        returnValue: _FakeTaskDetail_3(
          this,
          Invocation.method(
            #getDetailFromTask,
            [task],
          ),
        ),
        returnValueForMissingStub: _FakeTaskDetail_3(
          this,
          Invocation.method(
            #getDetailFromTask,
            [task],
          ),
        ),
      ) as _i5.TaskDetail);

  @override
  List<_i8.Task> getTasksFromStatus(_i22.TaskStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksFromStatus,
          [status],
        ),
        returnValue: <_i8.Task>[],
        returnValueForMissingStub: <_i8.Task>[],
      ) as List<_i8.Task>);

  @override
  dynamic updateTask(_i8.Task? task) => super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateTaskStatus(_i8.Task? task) => super.noSuchMethod(
        Invocation.method(
          #updateTaskStatus,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rebuildUi() => super.noSuchMethod(
        Invocation.method(
          #rebuildUi,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setInitialised(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setInitialised,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnModelReadyCalled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setOnModelReadyCalled,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool busy(Object? object) => (super.noSuchMethod(
        Invocation.method(
          #busy,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setBusyForObject(
    Object? object,
    bool? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setBusyForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBusy(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusy,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T skeletonData<T>({
    required T? realData,
    required T? busyData,
    Object? busyKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #skeletonData,
          [],
          {
            #realData: realData,
            #busyData: busyData,
            #busyKey: busyKey,
          },
        ),
        returnValue: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
        returnValueForMissingStub: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
      ) as T);

  @override
  _i3.Future<T> runBusyFuture<T>(
    _i3.Future<T>? busyFuture, {
    Object? busyObject,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runBusyFuture,
          [busyFuture],
          {
            #busyObject: busyObject,
            #throwException: throwException,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  dynamic error(Object? object) => super.noSuchMethod(
        Invocation.method(
          #error,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearErrors() => super.noSuchMethod(
        Invocation.method(
          #clearErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasErrorForKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #hasErrorForKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForModelOrObject(
    dynamic value, {
    Object? key,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForModelOrObject,
          [value],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForObject(
    Object? object,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<T> runErrorFuture<T>(
    _i3.Future<T>? future, {
    Object? key,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runErrorFuture,
          [future],
          {
            #key: key,
            #throwException: throwException,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  void onFutureError(
    dynamic error,
    Object? key,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onFutureError,
          [
            error,
            key,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setViewModelContext(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #setViewModelContext,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.TextEditingController getTextEditingController({String? text}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTextEditingController,
          [],
          {#text: text},
        ),
        returnValue: _FakeTextEditingController_4(
          this,
          Invocation.method(
            #getTextEditingController,
            [],
            {#text: text},
          ),
        ),
        returnValueForMissingStub: _FakeTextEditingController_4(
          this,
          Invocation.method(
            #getTextEditingController,
            [],
            {#text: text},
          ),
        ),
      ) as _i6.TextEditingController);

  @override
  _i6.FocusNode getFocusNode({
    String? debugLabel,
    _i6.KeyEventResult Function(
      _i6.FocusNode,
      _i6.RawKeyEvent,
    )? onKey,
    _i6.KeyEventResult Function(
      _i6.FocusNode,
      _i6.KeyEvent,
    )? onKeyEvent,
    bool? skipTraversal = false,
    bool? canRequestFocus = true,
    bool? descendantsAreFocusable = true,
    bool? descendantsAreTraversable = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFocusNode,
          [],
          {
            #debugLabel: debugLabel,
            #onKey: onKey,
            #onKeyEvent: onKeyEvent,
            #skipTraversal: skipTraversal,
            #canRequestFocus: canRequestFocus,
            #descendantsAreFocusable: descendantsAreFocusable,
            #descendantsAreTraversable: descendantsAreTraversable,
          },
        ),
        returnValue: _FakeFocusNode_5(
          this,
          Invocation.method(
            #getFocusNode,
            [],
            {
              #debugLabel: debugLabel,
              #onKey: onKey,
              #onKeyEvent: onKeyEvent,
              #skipTraversal: skipTraversal,
              #canRequestFocus: canRequestFocus,
              #descendantsAreFocusable: descendantsAreFocusable,
              #descendantsAreTraversable: descendantsAreTraversable,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFocusNode_5(
          this,
          Invocation.method(
            #getFocusNode,
            [],
            {
              #debugLabel: debugLabel,
              #onKey: onKey,
              #onKeyEvent: onKeyEvent,
              #skipTraversal: skipTraversal,
              #canRequestFocus: canRequestFocus,
              #descendantsAreFocusable: descendantsAreFocusable,
              #descendantsAreTraversable: descendantsAreTraversable,
            },
          ),
        ),
      ) as _i6.FocusNode);
}

/// A class which mocks [TimeTrackerViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeTrackerViewModel extends _i1.Mock
    implements _i28.TimeTrackerViewModel {
  @override
  set selectedTask(_i8.Task? _selectedTask) => super.noSuchMethod(
        Invocation.setter(
          #selectedTask,
          _selectedTask,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get secondsRecorded => (super.noSuchMethod(
        Invocation.getter(#secondsRecorded),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set secondsRecorded(int? _secondsRecorded) => super.noSuchMethod(
        Invocation.setter(
          #secondsRecorded,
          _secondsRecorded,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set timer(_i3.Timer? _timer) => super.noSuchMethod(
        Invocation.setter(
          #timer,
          _timer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get tracking => (super.noSuchMethod(
        Invocation.getter(#tracking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set tracking(bool? _tracking) => super.noSuchMethod(
        Invocation.setter(
          #tracking,
          _tracking,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isUpdatingTaskDuration => (super.noSuchMethod(
        Invocation.getter(#isUpdatingTaskDuration),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isUpdatingTaskDuration(bool? _isUpdatingTaskDuration) =>
      super.noSuchMethod(
        Invocation.setter(
          #isUpdatingTaskDuration,
          _isUpdatingTaskDuration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i8.Task> get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: <_i8.Task>[],
        returnValueForMissingStub: <_i8.Task>[],
      ) as List<_i8.Task>);

  @override
  List<_i8.Task> get trackedTasks => (super.noSuchMethod(
        Invocation.getter(#trackedTasks),
        returnValue: <_i8.Task>[],
        returnValueForMissingStub: <_i8.Task>[],
      ) as List<_i8.Task>);

  @override
  bool get isBusyFetchingTasks => (super.noSuchMethod(
        Invocation.getter(#isBusyFetchingTasks),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get totalFormattedTime => (super.noSuchMethod(
        Invocation.getter(#totalFormattedTime),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#totalFormattedTime),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#totalFormattedTime),
        ),
      ) as String);

  @override
  List<_i26.ListenableServiceMixin> get listenableServices =>
      (super.noSuchMethod(
        Invocation.getter(#listenableServices),
        returnValue: <_i26.ListenableServiceMixin>[],
        returnValueForMissingStub: <_i26.ListenableServiceMixin>[],
      ) as List<_i26.ListenableServiceMixin>);

  @override
  List<_i26.ReactiveServiceMixin> get reactiveServices => (super.noSuchMethod(
        Invocation.getter(#reactiveServices),
        returnValue: <_i26.ReactiveServiceMixin>[],
        returnValueForMissingStub: <_i26.ReactiveServiceMixin>[],
      ) as List<_i26.ReactiveServiceMixin>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get disposed => (super.noSuchMethod(
        Invocation.getter(#disposed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set disposed(bool? _disposed) => super.noSuchMethod(
        Invocation.setter(
          #disposed,
          _disposed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initialised => (super.noSuchMethod(
        Invocation.getter(#initialised),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get onModelReadyCalled => (super.noSuchMethod(
        Invocation.getter(#onModelReadyCalled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get anyObjectsBusy => (super.noSuchMethod(
        Invocation.getter(#anyObjectsBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set context(_i6.BuildContext? _context) => super.noSuchMethod(
        Invocation.setter(
          #context,
          _context,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.TaskDetail getDetailFromTask(_i8.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #getDetailFromTask,
          [task],
        ),
        returnValue: _FakeTaskDetail_3(
          this,
          Invocation.method(
            #getDetailFromTask,
            [task],
          ),
        ),
        returnValueForMissingStub: _FakeTaskDetail_3(
          this,
          Invocation.method(
            #getDetailFromTask,
            [task],
          ),
        ),
      ) as _i5.TaskDetail);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rebuildUi() => super.noSuchMethod(
        Invocation.method(
          #rebuildUi,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setInitialised(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setInitialised,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnModelReadyCalled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setOnModelReadyCalled,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool busy(Object? object) => (super.noSuchMethod(
        Invocation.method(
          #busy,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setBusyForObject(
    Object? object,
    bool? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setBusyForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBusy(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusy,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T skeletonData<T>({
    required T? realData,
    required T? busyData,
    Object? busyKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #skeletonData,
          [],
          {
            #realData: realData,
            #busyData: busyData,
            #busyKey: busyKey,
          },
        ),
        returnValue: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
        returnValueForMissingStub: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
      ) as T);

  @override
  _i3.Future<T> runBusyFuture<T>(
    _i3.Future<T>? busyFuture, {
    Object? busyObject,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runBusyFuture,
          [busyFuture],
          {
            #busyObject: busyObject,
            #throwException: throwException,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  dynamic error(Object? object) => super.noSuchMethod(
        Invocation.method(
          #error,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearErrors() => super.noSuchMethod(
        Invocation.method(
          #clearErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasErrorForKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #hasErrorForKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForModelOrObject(
    dynamic value, {
    Object? key,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForModelOrObject,
          [value],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForObject(
    Object? object,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<T> runErrorFuture<T>(
    _i3.Future<T>? future, {
    Object? key,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runErrorFuture,
          [future],
          {
            #key: key,
            #throwException: throwException,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  void onFutureError(
    dynamic error,
    Object? key,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onFutureError,
          [
            error,
            key,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setViewModelContext(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #setViewModelContext,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.TextEditingController getTextEditingController({String? text}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTextEditingController,
          [],
          {#text: text},
        ),
        returnValue: _FakeTextEditingController_4(
          this,
          Invocation.method(
            #getTextEditingController,
            [],
            {#text: text},
          ),
        ),
        returnValueForMissingStub: _FakeTextEditingController_4(
          this,
          Invocation.method(
            #getTextEditingController,
            [],
            {#text: text},
          ),
        ),
      ) as _i6.TextEditingController);

  @override
  _i6.FocusNode getFocusNode({
    String? debugLabel,
    _i6.KeyEventResult Function(
      _i6.FocusNode,
      _i6.RawKeyEvent,
    )? onKey,
    _i6.KeyEventResult Function(
      _i6.FocusNode,
      _i6.KeyEvent,
    )? onKeyEvent,
    bool? skipTraversal = false,
    bool? canRequestFocus = true,
    bool? descendantsAreFocusable = true,
    bool? descendantsAreTraversable = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFocusNode,
          [],
          {
            #debugLabel: debugLabel,
            #onKey: onKey,
            #onKeyEvent: onKeyEvent,
            #skipTraversal: skipTraversal,
            #canRequestFocus: canRequestFocus,
            #descendantsAreFocusable: descendantsAreFocusable,
            #descendantsAreTraversable: descendantsAreTraversable,
          },
        ),
        returnValue: _FakeFocusNode_5(
          this,
          Invocation.method(
            #getFocusNode,
            [],
            {
              #debugLabel: debugLabel,
              #onKey: onKey,
              #onKeyEvent: onKeyEvent,
              #skipTraversal: skipTraversal,
              #canRequestFocus: canRequestFocus,
              #descendantsAreFocusable: descendantsAreFocusable,
              #descendantsAreTraversable: descendantsAreTraversable,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFocusNode_5(
          this,
          Invocation.method(
            #getFocusNode,
            [],
            {
              #debugLabel: debugLabel,
              #onKey: onKey,
              #onKeyEvent: onKeyEvent,
              #skipTraversal: skipTraversal,
              #canRequestFocus: canRequestFocus,
              #descendantsAreFocusable: descendantsAreFocusable,
              #descendantsAreTraversable: descendantsAreTraversable,
            },
          ),
        ),
      ) as _i6.FocusNode);
}

/// A class which mocks [SettingsViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsViewModel extends _i1.Mock implements _i29.SettingsViewModel {
  @override
  _i7.ThemeService get themeService => (super.noSuchMethod(
        Invocation.getter(#themeService),
        returnValue: _FakeThemeService_6(
          this,
          Invocation.getter(#themeService),
        ),
        returnValueForMissingStub: _FakeThemeService_6(
          this,
          Invocation.getter(#themeService),
        ),
      ) as _i7.ThemeService);

  @override
  Map<String, String> get languages => (super.noSuchMethod(
        Invocation.getter(#languages),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  set languages(Map<String, String>? _languages) => super.noSuchMethod(
        Invocation.setter(
          #languages,
          _languages,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.ThemeManagerMode get currentTheme => (super.noSuchMethod(
        Invocation.getter(#currentTheme),
        returnValue: _i7.ThemeManagerMode.light,
        returnValueForMissingStub: _i7.ThemeManagerMode.light,
      ) as _i7.ThemeManagerMode);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get disposed => (super.noSuchMethod(
        Invocation.getter(#disposed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set disposed(bool? _disposed) => super.noSuchMethod(
        Invocation.setter(
          #disposed,
          _disposed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initialised => (super.noSuchMethod(
        Invocation.getter(#initialised),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get onModelReadyCalled => (super.noSuchMethod(
        Invocation.getter(#onModelReadyCalled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get anyObjectsBusy => (super.noSuchMethod(
        Invocation.getter(#anyObjectsBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set context(_i6.BuildContext? _context) => super.noSuchMethod(
        Invocation.setter(
          #context,
          _context,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setThemeMode(_i7.ThemeManagerMode? mode) => super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateLanguage(String? languageCode) => super.noSuchMethod(
        Invocation.method(
          #updateLanguage,
          [languageCode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rebuildUi() => super.noSuchMethod(
        Invocation.method(
          #rebuildUi,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setInitialised(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setInitialised,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnModelReadyCalled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setOnModelReadyCalled,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool busy(Object? object) => (super.noSuchMethod(
        Invocation.method(
          #busy,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setBusyForObject(
    Object? object,
    bool? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setBusyForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBusy(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusy,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T skeletonData<T>({
    required T? realData,
    required T? busyData,
    Object? busyKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #skeletonData,
          [],
          {
            #realData: realData,
            #busyData: busyData,
            #busyKey: busyKey,
          },
        ),
        returnValue: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
        returnValueForMissingStub: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
      ) as T);

  @override
  _i3.Future<T> runBusyFuture<T>(
    _i3.Future<T>? busyFuture, {
    Object? busyObject,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runBusyFuture,
          [busyFuture],
          {
            #busyObject: busyObject,
            #throwException: throwException,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  dynamic error(Object? object) => super.noSuchMethod(
        Invocation.method(
          #error,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearErrors() => super.noSuchMethod(
        Invocation.method(
          #clearErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasErrorForKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #hasErrorForKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForModelOrObject(
    dynamic value, {
    Object? key,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForModelOrObject,
          [value],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForObject(
    Object? object,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<T> runErrorFuture<T>(
    _i3.Future<T>? future, {
    Object? key,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runErrorFuture,
          [future],
          {
            #key: key,
            #throwException: throwException,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  void onFutureError(
    dynamic error,
    Object? key,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onFutureError,
          [
            error,
            key,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setViewModelContext(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #setViewModelContext,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.TextEditingController getTextEditingController({String? text}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTextEditingController,
          [],
          {#text: text},
        ),
        returnValue: _FakeTextEditingController_4(
          this,
          Invocation.method(
            #getTextEditingController,
            [],
            {#text: text},
          ),
        ),
        returnValueForMissingStub: _FakeTextEditingController_4(
          this,
          Invocation.method(
            #getTextEditingController,
            [],
            {#text: text},
          ),
        ),
      ) as _i6.TextEditingController);

  @override
  _i6.FocusNode getFocusNode({
    String? debugLabel,
    _i6.KeyEventResult Function(
      _i6.FocusNode,
      _i6.RawKeyEvent,
    )? onKey,
    _i6.KeyEventResult Function(
      _i6.FocusNode,
      _i6.KeyEvent,
    )? onKeyEvent,
    bool? skipTraversal = false,
    bool? canRequestFocus = true,
    bool? descendantsAreFocusable = true,
    bool? descendantsAreTraversable = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFocusNode,
          [],
          {
            #debugLabel: debugLabel,
            #onKey: onKey,
            #onKeyEvent: onKeyEvent,
            #skipTraversal: skipTraversal,
            #canRequestFocus: canRequestFocus,
            #descendantsAreFocusable: descendantsAreFocusable,
            #descendantsAreTraversable: descendantsAreTraversable,
          },
        ),
        returnValue: _FakeFocusNode_5(
          this,
          Invocation.method(
            #getFocusNode,
            [],
            {
              #debugLabel: debugLabel,
              #onKey: onKey,
              #onKeyEvent: onKeyEvent,
              #skipTraversal: skipTraversal,
              #canRequestFocus: canRequestFocus,
              #descendantsAreFocusable: descendantsAreFocusable,
              #descendantsAreTraversable: descendantsAreTraversable,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFocusNode_5(
          this,
          Invocation.method(
            #getFocusNode,
            [],
            {
              #debugLabel: debugLabel,
              #onKey: onKey,
              #onKeyEvent: onKeyEvent,
              #skipTraversal: skipTraversal,
              #canRequestFocus: canRequestFocus,
              #descendantsAreFocusable: descendantsAreFocusable,
              #descendantsAreTraversable: descendantsAreTraversable,
            },
          ),
        ),
      ) as _i6.FocusNode);
}

/// A class which mocks [TaskBoardRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBoardRepo extends _i1.Mock implements _i30.TaskBoardRepo {
  @override
  _i3.Future<List<_i8.Task>> fetchTasks({
    required String? projectId,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [],
          {
            #projectId: projectId,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<List<_i8.Task>>.value(<_i8.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i8.Task>>.value(<_i8.Task>[]),
      ) as _i3.Future<List<_i8.Task>>);

  @override
  _i3.Future<_i8.Task> createTask({
    required String? projectId,
    required String? content,
    String? description,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {
            #projectId: projectId,
            #content: content,
            #description: description,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i8.Task>.value(_FakeTask_7(
          this,
          Invocation.method(
            #createTask,
            [],
            {
              #projectId: projectId,
              #content: content,
              #description: description,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i8.Task>.value(_FakeTask_7(
          this,
          Invocation.method(
            #createTask,
            [],
            {
              #projectId: projectId,
              #content: content,
              #description: description,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i8.Task>);

  @override
  _i3.Future<_i8.Task> updateTask({
    required String? id,
    required String? content,
    String? description,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {
            #id: id,
            #content: content,
            #description: description,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i8.Task>.value(_FakeTask_7(
          this,
          Invocation.method(
            #updateTask,
            [],
            {
              #id: id,
              #content: content,
              #description: description,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i8.Task>.value(_FakeTask_7(
          this,
          Invocation.method(
            #updateTask,
            [],
            {
              #id: id,
              #content: content,
              #description: description,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i8.Task>);

  @override
  _i3.Future<bool> deleteTask({
    required String? taskId,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {
            #taskId: taskId,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i9.TaskComment>> fetchComments({
    required String? taskId,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchComments,
          [],
          {
            #taskId: taskId,
            #cancelToken: cancelToken,
          },
        ),
        returnValue:
            _i3.Future<List<_i9.TaskComment>>.value(<_i9.TaskComment>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i9.TaskComment>>.value(<_i9.TaskComment>[]),
      ) as _i3.Future<List<_i9.TaskComment>>);

  @override
  _i3.Future<_i9.TaskComment> createComment({
    required String? taskId,
    required String? content,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createComment,
          [],
          {
            #taskId: taskId,
            #content: content,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i9.TaskComment>.value(_FakeTaskComment_8(
          this,
          Invocation.method(
            #createComment,
            [],
            {
              #taskId: taskId,
              #content: content,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i9.TaskComment>.value(_FakeTaskComment_8(
          this,
          Invocation.method(
            #createComment,
            [],
            {
              #taskId: taskId,
              #content: content,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i9.TaskComment>);

  @override
  _i3.Future<List<_i5.TaskDetail>> getAllTaskDetails() => (super.noSuchMethod(
        Invocation.method(
          #getAllTaskDetails,
          [],
        ),
        returnValue: _i3.Future<List<_i5.TaskDetail>>.value(<_i5.TaskDetail>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.TaskDetail>>.value(<_i5.TaskDetail>[]),
      ) as _i3.Future<List<_i5.TaskDetail>>);

  @override
  _i3.Future<_i5.TaskDetail> saveTaskDetails(_i5.TaskDetail? taskDetail) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTaskDetails,
          [taskDetail],
        ),
        returnValue: _i3.Future<_i5.TaskDetail>.value(_FakeTaskDetail_3(
          this,
          Invocation.method(
            #saveTaskDetails,
            [taskDetail],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i5.TaskDetail>.value(_FakeTaskDetail_3(
          this,
          Invocation.method(
            #saveTaskDetails,
            [taskDetail],
          ),
        )),
      ) as _i3.Future<_i5.TaskDetail>);

  @override
  _i3.Future<bool> deleteTaskDetails(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTaskDetails,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [ProjectsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsRepo extends _i1.Mock implements _i31.ProjectsRepo {
  @override
  _i3.Future<List<_i10.Project>> fetchProjects(
          {_i2.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchProjects,
          [],
          {#cancelToken: cancelToken},
        ),
        returnValue: _i3.Future<List<_i10.Project>>.value(<_i10.Project>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i10.Project>>.value(<_i10.Project>[]),
      ) as _i3.Future<List<_i10.Project>>);

  @override
  _i3.Future<_i10.Project> createProject({
    required String? name,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [],
          {
            #name: name,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i10.Project>.value(_FakeProject_9(
          this,
          Invocation.method(
            #createProject,
            [],
            {
              #name: name,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i10.Project>.value(_FakeProject_9(
          this,
          Invocation.method(
            #createProject,
            [],
            {
              #name: name,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i10.Project>);

  @override
  _i3.Future<_i10.Project> updateProject({
    required String? id,
    required String? name,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [],
          {
            #id: id,
            #name: name,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i10.Project>.value(_FakeProject_9(
          this,
          Invocation.method(
            #updateProject,
            [],
            {
              #id: id,
              #name: name,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i10.Project>.value(_FakeProject_9(
          this,
          Invocation.method(
            #updateProject,
            [],
            {
              #id: id,
              #name: name,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i10.Project>);

  @override
  _i3.Future<bool> deleteProject({
    required String? id,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [],
          {
            #id: id,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i2.Dio {
  @override
  _i2.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_10(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeBaseOptions_10(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.BaseOptions);

  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_11(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
        returnValueForMissingStub: _FakeHttpClientAdapter_11(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i2.HttpClientAdapter);

  @override
  set httpClientAdapter(_i2.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_12(
          this,
          Invocation.getter(#transformer),
        ),
        returnValueForMissingStub: _FakeTransformer_12(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i2.Transformer);

  @override
  set transformer(_i2.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_13(
          this,
          Invocation.getter(#interceptors),
        ),
        returnValueForMissingStub: _FakeInterceptors_13(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i2.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i2.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i2.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i3.Future<_i2.Response<dynamic>>.value(_FakeResponse_14<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<dynamic>>.value(_FakeResponse_14<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<dynamic>>);

  @override
  _i3.Future<_i2.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i3.Future<_i2.Response<dynamic>>.value(_FakeResponse_14<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<dynamic>>.value(_FakeResponse_14<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<dynamic>>);

  @override
  _i3.Future<_i2.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i2.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);

  @override
  _i3.Future<_i2.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i3.Future<_i2.Response<T>>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i32.Box<E> {
  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
        returnValueForMissingStub: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
        returnValueForMissingStub: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
        returnValueForMissingStub: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getAt,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
        returnValueForMissingStub: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(
        Invocation.method(
          #keyAt,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Stream<_i32.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i3.Stream<_i32.BoxEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i32.BoxEvent>.empty(),
      ) as _i3.Stream<_i32.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i3.Future<Iterable<int>>.value(<int>[]),
        returnValueForMissingStub: _i3.Future<Iterable<int>>.value(<int>[]),
      ) as _i3.Future<Iterable<int>>);

  @override
  _i3.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [TextEditingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextEditingController extends _i1.Mock
    implements _i6.TextEditingController {
  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
      ) as String);

  @override
  set text(String? newText) => super.noSuchMethod(
        Invocation.setter(
          #text,
          newText,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set value(_i6.TextEditingValue? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.TextSelection get selection => (super.noSuchMethod(
        Invocation.getter(#selection),
        returnValue: _FakeTextSelection_15(
          this,
          Invocation.getter(#selection),
        ),
        returnValueForMissingStub: _FakeTextSelection_15(
          this,
          Invocation.getter(#selection),
        ),
      ) as _i6.TextSelection);

  @override
  set selection(_i6.TextSelection? newSelection) => super.noSuchMethod(
        Invocation.setter(
          #selection,
          newSelection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.TextEditingValue get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeTextEditingValue_16(
          this,
          Invocation.getter(#value),
        ),
        returnValueForMissingStub: _FakeTextEditingValue_16(
          this,
          Invocation.getter(#value),
        ),
      ) as _i6.TextEditingValue);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.TextSpan buildTextSpan({
    required _i6.BuildContext? context,
    _i6.TextStyle? style,
    required bool? withComposing,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildTextSpan,
          [],
          {
            #context: context,
            #style: style,
            #withComposing: withComposing,
          },
        ),
        returnValue: _FakeTextSpan_17(
          this,
          Invocation.method(
            #buildTextSpan,
            [],
            {
              #context: context,
              #style: style,
              #withComposing: withComposing,
            },
          ),
        ),
        returnValueForMissingStub: _FakeTextSpan_17(
          this,
          Invocation.method(
            #buildTextSpan,
            [],
            {
              #context: context,
              #style: style,
              #withComposing: withComposing,
            },
          ),
        ),
      ) as _i6.TextSpan);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearComposing() => super.noSuchMethod(
        Invocation.method(
          #clearComposing,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FocusNode].
///
/// See the documentation for Mockito's code generation for more information.
class MockFocusNode extends _i1.Mock implements _i6.FocusNode {
  @override
  set onKey(_i6.FocusOnKeyCallback? _onKey) => super.noSuchMethod(
        Invocation.setter(
          #onKey,
          _onKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onKeyEvent(_i6.FocusOnKeyEventCallback? _onKeyEvent) =>
      super.noSuchMethod(
        Invocation.setter(
          #onKeyEvent,
          _onKeyEvent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get skipTraversal => (super.noSuchMethod(
        Invocation.getter(#skipTraversal),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set skipTraversal(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #skipTraversal,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get canRequestFocus => (super.noSuchMethod(
        Invocation.getter(#canRequestFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set canRequestFocus(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #canRequestFocus,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get descendantsAreFocusable => (super.noSuchMethod(
        Invocation.getter(#descendantsAreFocusable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set descendantsAreFocusable(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #descendantsAreFocusable,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get descendantsAreTraversable => (super.noSuchMethod(
        Invocation.getter(#descendantsAreTraversable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set descendantsAreTraversable(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #descendantsAreTraversable,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i6.FocusNode> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i6.FocusNode>[],
        returnValueForMissingStub: <_i6.FocusNode>[],
      ) as Iterable<_i6.FocusNode>);

  @override
  Iterable<_i6.FocusNode> get traversalChildren => (super.noSuchMethod(
        Invocation.getter(#traversalChildren),
        returnValue: <_i6.FocusNode>[],
        returnValueForMissingStub: <_i6.FocusNode>[],
      ) as Iterable<_i6.FocusNode>);

  @override
  set debugLabel(String? value) => super.noSuchMethod(
        Invocation.setter(
          #debugLabel,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i6.FocusNode> get descendants => (super.noSuchMethod(
        Invocation.getter(#descendants),
        returnValue: <_i6.FocusNode>[],
        returnValueForMissingStub: <_i6.FocusNode>[],
      ) as Iterable<_i6.FocusNode>);

  @override
  Iterable<_i6.FocusNode> get traversalDescendants => (super.noSuchMethod(
        Invocation.getter(#traversalDescendants),
        returnValue: <_i6.FocusNode>[],
        returnValueForMissingStub: <_i6.FocusNode>[],
      ) as Iterable<_i6.FocusNode>);

  @override
  Iterable<_i6.FocusNode> get ancestors => (super.noSuchMethod(
        Invocation.getter(#ancestors),
        returnValue: <_i6.FocusNode>[],
        returnValueForMissingStub: <_i6.FocusNode>[],
      ) as Iterable<_i6.FocusNode>);

  @override
  bool get hasFocus => (super.noSuchMethod(
        Invocation.getter(#hasFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasPrimaryFocus => (super.noSuchMethod(
        Invocation.getter(#hasPrimaryFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.FocusHighlightMode get highlightMode => (super.noSuchMethod(
        Invocation.getter(#highlightMode),
        returnValue: _i6.FocusHighlightMode.touch,
        returnValueForMissingStub: _i6.FocusHighlightMode.touch,
      ) as _i6.FocusHighlightMode);

  @override
  _i11.Size get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeSize_18(
          this,
          Invocation.getter(#size),
        ),
        returnValueForMissingStub: _FakeSize_18(
          this,
          Invocation.getter(#size),
        ),
      ) as _i11.Size);

  @override
  _i11.Offset get offset => (super.noSuchMethod(
        Invocation.getter(#offset),
        returnValue: _FakeOffset_19(
          this,
          Invocation.getter(#offset),
        ),
        returnValueForMissingStub: _FakeOffset_19(
          this,
          Invocation.getter(#offset),
        ),
      ) as _i11.Offset);

  @override
  _i11.Rect get rect => (super.noSuchMethod(
        Invocation.getter(#rect),
        returnValue: _FakeRect_20(
          this,
          Invocation.getter(#rect),
        ),
        returnValueForMissingStub: _FakeRect_20(
          this,
          Invocation.getter(#rect),
        ),
      ) as _i11.Rect);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void unfocus(
          {_i6.UnfocusDisposition? disposition =
              _i6.UnfocusDisposition.scope}) =>
      super.noSuchMethod(
        Invocation.method(
          #unfocus,
          [],
          {#disposition: disposition},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool consumeKeyboardToken() => (super.noSuchMethod(
        Invocation.method(
          #consumeKeyboardToken,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.FocusAttachment attach(
    _i6.BuildContext? context, {
    _i6.FocusOnKeyEventCallback? onKeyEvent,
    _i6.FocusOnKeyCallback? onKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #attach,
          [context],
          {
            #onKeyEvent: onKeyEvent,
            #onKey: onKey,
          },
        ),
        returnValue: _FakeFocusAttachment_21(
          this,
          Invocation.method(
            #attach,
            [context],
            {
              #onKeyEvent: onKeyEvent,
              #onKey: onKey,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFocusAttachment_21(
          this,
          Invocation.method(
            #attach,
            [context],
            {
              #onKeyEvent: onKeyEvent,
              #onKey: onKey,
            },
          ),
        ),
      ) as _i6.FocusAttachment);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void requestFocus([_i6.FocusNode? node]) => super.noSuchMethod(
        Invocation.method(
          #requestFocus,
          [node],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool nextFocus() => (super.noSuchMethod(
        Invocation.method(
          #nextFocus,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool previousFocus() => (super.noSuchMethod(
        Invocation.method(
          #previousFocus,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool focusInDirection(_i6.TraversalDirection? direction) =>
      (super.noSuchMethod(
        Invocation.method(
          #focusInDirection,
          [direction],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void debugFillProperties(_i12.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i6.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i6.DiagnosticsNode>[],
        returnValueForMissingStub: <_i6.DiagnosticsNode>[],
      ) as List<_i6.DiagnosticsNode>);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i6.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i12.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_22(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_22(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i6.DiagnosticsNode);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
